--- Debugging HTML ---

Writing HTML is fine, but what if something goes wrong, and you can't work out where the error in the code is? This article will introduce you to some tools that can help you 
find and fix errors in HTML.

Objetive: Learn the basics of using debuggins tools to find problems in HTML


--- Debugging isn't scary ---
When writing code of some kind, everything is usually fine, until that dreaded moment
when an error occurs - You've done something wrong, so your code doesn't work -- either not at all, or not quite how you wanted it to.

Debugging doesn't have to be scary though -- the key to being comfortable with writing
and debugging any programming language or code is familiarity with both the language and the tools.

--- HTML and Debugging ---

HTML is not as complicated to understand as Rust. HTML is not compiled into a different form before the browser parses it and shows the result (it is interpreted, not compiled). And HTML's element syntax is arguably a lot easier to understand than a "real programming languae" like Rust, JavaScript, or Python. The way that browsers parse HTML is a
lot more permissive than how programming languages are run, which is both a good and a 
bad thing.


--- Permissive code ---
So what do we mean by permissive? well, generally when you do something wrong in code,
there are two main types of error that you will come across:

* Syntax errors: These are spelling or punctuation erorrs in your code that actually
cause the program not to run, like the Rust error shown above. These are usually easy to fix as long as you are familiar with the language's syntax and know what th error 
messages mean.

* Logic errors: These are erros where the syntax is actually correct, but the code is
not what you intened it to be, meaning that the program runs incorrectly. These are 
often harder to fix than syntax errors, as there isn't an error message to direct you to the source of the error.

HTML itself doesn't suffer from syntax errors because browsers parse it permissively,
meaning that the page still displays even if there are syntax errors. Browsers have 
built-in rules to state how to interpret incorrectly written markup, so you'll get 
something running, even if it is no what you expected. This, of course, can still be a
problem!


Note: HTML is parsed permissively because when the web was first created, it was decided that allowing people to get their content published was more important than making sure the syntax was absolutely correct. The web would probably not be as popular as it is today, if it had been more strict from the very beginning.


--- HTML validation ---

So you can see from the above example that you really want to make sure your HTML is
well-formed! But how? In a small example like the one seen above, it is easy to search
through the lines and find errors, but what about a huge, complex HTML document?

The best strategy is to start by running your HTML page through the Markup Validation
Service -- created and maintained by the W3C, the organization that looks after the 
specifications that define HTML, CSS, and other web technologies. This webpage takes an HTML document as an input, goes through it, and gives you a report to tell you what is
wrong with your HTML. (https://validator.w3.org/).

To specify the HTML to validate, you can provide a web address, upload an HTML file, or directly input some HTML code.


Interpreting the error messages
The error messages are usually helpful, but sometimes they are not so helpful; with a bit of practice you can work out how to interpret these to fix your code. Let's go through the error messages and see what they mean. You'll see that each message comes with a line and column number to help you to locate the error easily.

"End tag li implied, but there were open elements" (2 instances): These messages indicate that an element is open that should be closed. The ending tag is implied, but not actually there. The line/column information points to the first line after the line where the closing tag should really be, but this is a good enough clue to see what is wrong.
"Unclosed element strong": This is really easy to understand — a <strong> element is unclosed, and the line/column information points right to where it is.
"End tag strong violates nesting rules": This points out the incorrectly nested elements, and the line/column information points out where they are.
"End of file reached when inside an attribute value. Ignoring tag": This one is rather cryptic; it refers to the fact that there is an attribute value not properly formed somewhere, possibly near the end of the file because the end of the file appears inside the attribute value. The fact that the browser doesn't render the link should give us a good clue as to what element is at fault.
"End of file seen and there were open elements": This is a bit ambiguous, but basically refers to the fact there are open elements that need to be properly closed. The line numbers point to the last few lines of the file, and this error message comes with a line of code that points out an example of an open element:
example: <a href="https://www.mozilla.org/>link to Mozilla homepage</a> ↩ </ul>↩ </body>↩</html>

Note: An attribute missing a closing quote can result in an open element because the 
rest of the document is interpreted as the attribute's content.

"Unclosed element ul": This is not very helpful, as the <ul> element is closed correctly. This error comes up because the <a> element is not closed, due to the missing closing quote mark.

If you can't work out what every error message means, don't worry about it — a good idea is to try fixing a few errors at a time. Then try revalidating your HTML to show what errors are left. Sometimes fixing an earlier error will also get rid of other error messages — several errors can often be caused by a single problem, in a domino effect.

You will know when all your errors are fixed when you see the following banner in your 
output:


The document validates according to the specified schema(s) and to additional
constraints checked by the validator.

Summary
So there we have it, an introduction to debugging HTML, which should give you some 
useful skills to count on when you start to debug CSS, JavaScript, and other types of 
code later on in your career. This also marks the end of the Introduction to HTML 
module learning articles — now you can go on to testing yourself with our assessments: 
the first one is linked below.


