-- Creating Hyperlinks --

Hyperlinks are very important, they are what makes the web a web. This article shows the syntax required to make a
link, and discusses link best practices.

-- What is a hyperlink? --

Hyperlinks are one of the most exciting innovations the web has to offer. They have been a feature of the web since the beginning, and are what makes the web a web. Hyperlinks allow us to link documents to other documents or 
resources, link to specific parts of documents, or make apps available at a web address. Almost any web content can be converted to a link so that when clicked or otherwise activated thr web browser goes to another web address (URL)


A URL can point to HTML files, text files, images, text documents, video and audio files, or anything else that lives on the Web. If the web browser doesn't know how to display or handle the file, it will ask you if you want to open the file (in which case the 
duty of opening or handling the file is passed to a suitable native app on the device) 
or download the file (in which case you can try to deal with it later on).

For example, the BBC homepage contains many links that point not only to multiple 
news stories, but also different areas of the site (navigation functionality), 
login/registration pages (user tools), and more.

-- Anatomy of a link --

A basic link is created by wrapping the next or other content inside an <a> element and using the href attribute, also known as HyperText Reference, or Target, that contains
the web address.

<p>
  I'm creating a link to
  <a href="https://www.mozilla.org/en-US/">the Mozilla homepage</a>.
</p>


-- Block Level Links --

As mentioned before, almost any content can be made into a link, even block-level-elements. If you want to make a heading element a link then wrap it in a anchor (<a>) element as shwon in the following code snippet:

<a href="https://developer.mozilla.org/en-US/">
  <h1>MDN Web Docs</h1>
</a>
<p>
  Documenting web technologies, including CSS, HTML, and JavaScript, since 2005.
</p>

This truns the heading into a link.

-- Image Links --

If you have an image you want to make into a link use the <a> element to wrap the image file referenced with the <img> element. The example below uses a relative path to reference a locally stored SVG image file.

<a href="https://developer.mozilla.org/en-US/">
  <img src="mdn_logo.svg" alt="MDN Web Docs" />
</a>


This makes the MDN logo a link.


-- Adding supporting information with the tittle atrribute --

Another attribute you may want to add yo your links is title. The title constains addional information about the link, such as which kind of information the page constains, or things to be aware of on the website.

<p>
  I'm creating a link to
  <a
    href="https://www.mozilla.org/en-US/"
    title="The best place to find more information about Mozilla's
          mission and how to contribute">
    the Mozilla homepage</a>.
</p>


Note: A link title is only revealed on mouse hover, which means that people relying on keyboard controls or touchscreens to navigate web pages will have difficulty accessing title information. If a title's information is truly important to the usability of the page, then you should present it in a manner that will be accessible to all users, for example by putting it in the regular text.

-- A quick primer on URLs and Paths --

To fully understand link targets, you need to understand URLs and file paths. This section gives you the information you need to achieve this.

A URL, or Uniform Resource Locator is a string of text that defines where something is located on the Web. For example, Mozilla's English Homepage is located at https://www.mozilla.org/en-US/.

URLs use the paths to find files. Paths specify where the file you are interested in is located in the filesystem.

In a real website, index.html would be our home page or landing page (a web page that serves as the entry point for a website or a particular section of a website).

You can have two index.html files in one project, as long as they are in different filesystem locations.


Same directory: If you wanted to include a hyperlink inside index.html (the top level index.html) pointing to contacts.html, you would specify the filename that you want to 
link to, because it's in the same directory as the current file. The URL you would use 
is contacts.html:

<p>
  Want to contact a specific staff member? Find details on our
  <a href="contacts.html">contacts page</a>.
</p>


Moving down into subdirectories: If you wanted to include a hyperlink inside index.html (the top level index.html) pointing to projects/index.html, you would need to go down 
into the projects directory before indicating the file you want to link to. This is 
done by specifying the directory's name, then a forward slash, then the name of the 
file. The URL you would use is projects/index.html:

<p>Visit my <a href="projects/index.html">project homepage</a>.</p>

Moving back up into parent directories: If you wanted to include a hyperlink inside 
projects/index.html pointing to pdfs/project-brief.pdf, you'd have to go up a 
directory level, then back down into the pdfs directory. To go up a directory, 
use two dots — .. — so the URL you would use is ../pdfs/project-brief.pdf:

<p>A link to my <a href="../pdfs/project-brief.pdf">project brief</a>.</p>

Note: You can combine multiple instances of these features into complex URLs, if needed, for example: ../../../complex/path/to/my/file.html.


-- Document Fragments --

It's possible to link to a specific part of an HTML document, known as a document fragment, rather than just to the top of the document. To do this you first have to assign an id attribute to the element you want to link to. It normally makes sense to link to a 
specific heading, so this would look something like the following:

<h2 id="Mailing_address">Mailing address</h2>

then to link to that specific id, you'd include it at the end of the URL, preceded by a has/pound symbol (#), for example:

<p>
  Want to write us a letter? Use our
  <a href="contacts.html#Mailing_address"> Mailing Address</a>
</p>


You can even use the document fragment reference on its own to link to another part of 
of the current document:

<p>
  The <a href="#Mailing_Address">Comany mailing address</a> can be found at the bottom
of this page.
</p>

-- Absolute versus relative URLs

Two terms you will come across on the web are absolute URL and relative URL:

* absolute URL: Points to a location defined by its absolute location on the web, 
including protocol and domain name. For example, if an index.html page is uploaded to a directory called projects that sits inside the root of a web server, and the website's 
domain is https://www.example.com, the page would be available at
https://www.example.com/projects/index.html (or even just https://example.com/projects/)
, as most web servers just look for a landing page such as index.html to load if it 
isn't specified in the URL).

An absolute URL will always point to the same location, no matter where it's used.

* relative URL: Points to a location that is relative to the file you are linking from, more like what we looked at in the previous section. For example, if we wanted to link 
from our example file at https://www.example.com/projects/index.html to a PDF file in 
the same directory, the URL, would just be the filename --- projects-brief.pdf --- no
extra information needed. If the PDF was available in a subdirectory inside projects called pdfs, the realite link would be pdfs/projects-brief.pdf (the equivalent absolute URL would be https://www.example.com/projects/pdfs-brief.pdf).

Of course, the location of the project-brief.pdf file and pdfs folder won't suddenly 
change because you moved the index.html file -- this would make your link point to the
wrong place, so it wouldn't work if clicked on. You need to be careful!


--- Link Best Practices ---

There are some best practices to follow when writing links. Let's look at these now.

- USE CLEAR LINK WORDING -
Its easy to throw links up on your page. That's not enough. We need to make our links
accessible to all readers, regardless of their current context and which tools they 
prefer. For example:

	* Screen reader users like jumping around from link on the page, and reading
	  links out of context.

	* Search Engines use link text to index target files, so it is a good idea to 
          include keywords in your link text to effectively describe what is being 
	  linked to.

	* Visual readers skim over the page rather reading every word, and their eyes
	  will be drawn to page features that stand out, like this. They will find 
	  descriptive link text useful.

Let's look at a specific example:

- Good link text: Download Firefox.

<p><a href="https://www.mozilla.org/firefox/">Download Firefox</a></p>

- Bad link text: Click Here to download Firefox.

<p>
  <a href="https://www.mozilla.org/firefox/">Click here</a> to download Firefox
</p>


Other tips:

Don't repeat the URL as part of the link text — URLs look ugly, and sound even uglier when a screen reader reads them out letter by letter.

Don't say "link" or "links to" in the link text — it's just noise. Screen readers tell people there's a link. Visual users will also know there's a link, because links are generally styled in a different color and underlined (this convention generally shouldn't be broken, as users are used to it).

Keep your link text as short as possible — this is helpful because screen readers need to interpret the entire link text.

Minimize instances where multiple copies of the same text are linked to different places. This can cause problems for screen reader users, if there's a list of links out of context that are labeled "click here", "click here", "click here".


-- Linking to non-HTML resources -- leave clear signposts --

When linking to a resource that will be downloaded (like a PDF or Word document), 
streamed (like video or audio), or has another potentially unexpected effect 
(opens a popup window), you should add clear wording to reduce any confusion.

For example:

* If you're on a low bandwidth connection, click a link, and then multiple megabyte 
download starts unexpectedly.

Let's look at some examples, to see what kind of text can be used here:

<p>
  <a href="https://www.example.com/large-report.pdf">
    Download the sales report (PDF, 10MB)
  </a>
</p>

<p>
  <a href="https://www.example.com/video-stream/" target="_blank">
    Watch the video (stream opens in separate tab, HD quality)
  </a>
</p>


Use the download attribute when linking to a download
When you are linking to a resource that's to be downloaded rather than opened in the 
browser, you can use the download attribute to provide a default save filename. Here's 
an example with a download link to the latest Windows version of Firefox:

<a
  href="https://download.mozilla.org/?product=firefox-latest-ssl&os=win64&lang=en-US"
  download="firefox-latest-64bit-installer.exe">
  Download Latest Firefox for Windows (64-bit) (English, US)
</a>


- Email Links --

It's possible to create links or buttons that, when clicked, open a new outgoing email
message rather than linking to a resource or page. This is done using the <a> element
and the mailto: URL scheme.

in its most basic and commonly used form, a mailto: link indicates the email address of the intended recipient. For example:

<a href="mailto:nowhere@mozilla.org">Send email to nowhere</a>

This results in a link that looks like this: Send Email to nowhere.

In fact, the email address is optional. If you omit it and your href is "mailto:", a new outgoing email window will be opened by the user's email client with no destination 
address. This is often useful as "Share" links that users can click to send an email 
to an address of their choosing.

Specifying details
In addition to the email address, you can provide other information. In fact, any standard mail header fields can be added to the mailto URL you provide. The most commonly used of these are "subject", "cc", and "body" (which is not a true header field, but allows you to specify a short content message for the new email). Each field and its value is specified as a query term.

Here's an example that includes a cc, bcc, subject and body:


<a
  href="mailto:nowhere@mozilla.org?cc=name2@rapidtables.com&bcc=name3@rapidtables.com&subject=The%20subject%20of%20the%20email&body=The%20body%20of%20the%20email">
  Send mail with cc, bcc, subject and body
</a>


Note: The values of each field must be URL-encoded with non-printing characters (invisible characters like tabs, carriage returns, and page breaks) and spaces percent-escaped. Also, note the use of the question mark (?) to separate the main URL from the field values, and ampersands (&) to separate each field in the mailto: URL. This is standard URL query notation. Read The GET method to understand what URL query notation is more commonly used for.

Here are a few other sample mailto URLs:

mailto:
mailto:nowhere@mozilla.org
mailto:nowhere@mozilla.org,nobody@mozilla.org
mailto:nowhere@mozilla.org?cc=nobody@mozilla.org
mailto:nowhere@mozilla.org?cc=nobody@mozilla.org&subject=This%20is%20the%20subject
